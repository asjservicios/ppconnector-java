plugins {
    id "java"
    id "java-library"
    id "com.jfrog.bintray" version "1.8.1"
    id "maven-publish"
}

def packageName = 'ar.com.pluspagos'
def libraryVersion = '0.2.13'
def libraryArtifactId = 'ppconnector-java'

group packageName
version libraryVersion
sourceCompatibility = 1.7

def pomConfig = {
    licenses {
        license {
            name "MIT"
            url "https://opensource.org/licenses/mit-license.php"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "asjservicios"
            name "asjservicios"
            email "andres.ceccoli@solucionesandinas.com.ar"
        }
    }

    scm {
        url "https://github.com/asjservicios/ppconnector-java.git"
    }
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            groupId packageName
            artifactId libraryArtifactId
            version libraryVersion
        }
    }
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    publications = ['MyPublication']
    pkg {
        repo = 'ppconnector-java'
        name = 'ar.com.pluspagos.ppconnector'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/asjservicios/ppconnector-java.git'
        desc = 'SDK para consumir los servicios del API PÃºblica de PlusPagos, para java y android'
        websiteUrl = 'https://github.com/asjservicios/ppconnector-java'
        publish = true
        publicDownloadNumbers = true

        version {
            name = libraryVersion
        }
    }
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    api 'com.squareup.retrofit2:retrofit:2.5.0'
    api 'com.squareup.retrofit2:converter-gson:2.5.0'
    api 'com.squareup.okhttp3:okhttp:3.12.6'
    testCompile group: 'junit', name: 'junit', version: '4.12'

}


compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
